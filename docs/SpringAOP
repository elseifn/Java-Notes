应用场景：权限控制，缓存优化。
实现原理：基于代理模式，JDK动态代理和Cglib动态代理。
代理模式，对象在调用方法前处理，在调用方法后处理。。
静态代理：由自己实现代理类。
动态代理：由自带工具类生产代理类。
JDK动态代理，交由JdkProxyHandler创建代理对象，运用了反射机制。
Cglib动态代理，运用字节码技术。
SpringAOP结合两种代理。如果目标对象的实现类实现了接口，AOP采用JDK动态代理；如果目标对象没有实现接口，AOP采用Cglib生成代理类。
